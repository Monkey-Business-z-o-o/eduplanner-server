name: CI Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Sprawdzenie kodu
      - name: Checkout code
        uses: actions/checkout@v3

      # Ustawienie zmiennych środowiskowych
      - name: Set environment variables
        run: |
          echo "DB_DATA_VOLUME=/srv/test/db_data" >> $GITHUB_ENV
          echo "SPRING_PROFILES_ACTIVE=test" >> $GITHUB_ENV
          echo "POSTGRES_USER=root" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=root123" >> $GITHUB_ENV
          echo "POSTGRES_DB=eduplanner" >> $GITHUB_ENV

      # Weryfikacja zmiennych środowiskowych (debugowanie)
      - name: Print environment variables
        run: printenv | grep -E "DB_DATA_VOLUME|SPRING_PROFILES_ACTIVE|POSTGRES_"

      # Dodatkowa weryfikacja kluczowych zmiennych środowiskowych
      - name: Verify environment variables
        run: |
          if [ "$SPRING_PROFILES_ACTIVE" != "test" ]; then
            echo "SPRING_PROFILES_ACTIVE is not set to 'test'."
            exit 1
          fi
          if [ "$POSTGRES_USER" != "root" ]; then
            echo "POSTGRES_USER is not 'root'."
            exit 1
          fi
          if [ "$POSTGRES_PASSWORD" != "root123" ]; then
            echo "POSTGRES_PASSWORD is not 'root123'."
            exit 1
          fi
          if [ "$POSTGRES_DB" != "eduplanner" ]; then
            echo "POSTGRES_DB is not 'eduplanner'."
            exit 1
          fi
          echo "All environment variables are set correctly."

      # Instalacja Docker Compose
      - name: Install Docker Compose
        run: |
          curl -SL https://github.com/docker/compose/releases/download/v2.22.0/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker-compose version

      # Debugowanie wersji Dockera i Compose
      - name: Verify Docker and Compose version
        run: |
          docker --version
          docker-compose --version

      # Dodajemy plik .dockerignore, aby wykluczyć edudb.sql z kontekstu
      - name: Create .dockerignore in build context
        run: |
          echo "edudb.sql" >> ../eduplanner-server/.dockerignore

      # Debugowanie plików przed uruchomieniem docker-compose
      - name: Debug repository files
        run: ls -R

      # Uruchomienie usług Docker Compose
      - name: Start services with Docker Compose
        run: docker-compose -f ./docker-compose.yml up -d

      # Debugowanie: lista kontenerów Docker
      - name: List running Docker containers
        run: docker ps -a

      # Oczekiwanie na gotowość bazy danych
      - name: Wait for Database to be Ready
        run: |
          for i in {1..10}; do
            docker exec eduplanner-database pg_isready -U $POSTGRES_USER && break
            sleep 5
          done

      # Ustawienie JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Nadanie uprawnień do Gradle Wrapper
      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      # Uruchomienie testów
      - name: Run tests
        run: ./gradlew test

      # Debugowanie: listowanie dzienników backendu w razie błędu
      - name: Fetch Backend Logs
        if: failure()
        run: docker logs eduplanner-backend || true

      # Debugowanie: logi bazy danych w razie błędu
      - name: Fetch Database Logs
        if: failure()
        run: docker logs eduplanner-database || true

      # Zatrzymanie usług po zakończeniu
      - name: Stop and remove services
        if: always()
        run: docker-compose -f ./docker-compose.yml down
