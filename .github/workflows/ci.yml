name: CI Pipeline

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout kodu
      - name: Checkout code
        uses: actions/checkout@v3

      # Ustawienie zmiennych środowiskowych
      - name: Set environment variables
        run: |
          echo "DB_DATA_VOLUME=/srv/test/db_data" >> $GITHUB_ENV
          echo "SPRING_PROFILES_ACTIVE=test" >> $GITHUB_ENV
          echo "POSTGRES_USER=root" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=root123" >> $GITHUB_ENV
          echo "POSTGRES_DB=eduplanner" >> $GITHUB_ENV

      # Usunięcie istniejących danych (jeśli pozostały)
      - name: Ensure data directory is clean
        run: docker volume rm eduplanner-server_db_data || true

      # Usunięcie kontenerów (jeśli istnieją)
      - name: Remove existing containers
        run: docker-compose -f ./docker-compose.yml down -v || true

      # Instalacja Docker Compose
      - name: Install Docker Compose
        run: |
          curl -SL https://github.com/docker/compose/releases/download/v2.22.0/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

      # Uruchomienie usług Docker Compose
      - name: Start services with Docker Compose
        run: docker-compose -f ./docker-compose.yml up -d

      # Debugowanie logów bazy danych w przypadku niepowodzenia
      - name: Fetch Database Logs
        if: failure()
        run: docker logs eduplanner-database-dev || true

      # Debugowanie logów backendu w przypadku niepowodzenia
      - name: Fetch Backend Logs
        if: failure()
        run: docker logs eduplanner-backend-dev || true

      # Zatrzymanie usług po zakończeniu
      - name: Stop and remove services
        if: always()
        run: docker-compose -f ./docker-compose.yml down

              # Weryfikacja rozszerzeń w bazie danych
      - name: Verify database extensions
        run: |
        docker exec eduplanner-database-dev psql -U root -d postgres -c "CREATE EXTENSION IF NOT EXISTS dblink;"

      - name: Set environment variables
        run: |
          echo "DATABASE_PORT=5433" >> $GITHUB_ENV

      - name: Check container health
        if: failure()
        run: docker inspect --format='{{json .State.Health}}' eduplanner-database-dev || true


      - name: Display all container logs
        if: always()
        run: |
          docker ps -a
          for container in $(docker ps -aq); do
            echo "Logs for container $container:"
            docker logs $container || true
          done
        


